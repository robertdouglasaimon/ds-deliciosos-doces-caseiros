import streamlit as st
import sqlite3

# **üíæ Configura√ß√£o e conex√£o**
st.set_page_config(page_title="Painel Administrativo", layout="wide")

# **üõ†Ô∏è Conectar ao banco (Agora com caminho correto!)**
def conectar():
    return sqlite3.connect("ds-sistema-gerenciamento/ds_banco.db")

# **üîí Verificar login antes de exibir o painel**
if "usuario_logado" not in st.session_state:
    st.warning("üö® Acesso negado! Volte para a tela de login.")
    st.stop()
    

# **üé® Painel administrativo**
st.title(f"Painel Administrativo üç¨ - Bem-vindo, {st.session_state['usuario_logado']}!")

# **üö™ Bot√£o de sa√≠da**
if st.sidebar.button("üö™ Sair"):
    del st.session_state["usuario_logado"]
    st.success("‚úÖ Voc√™ saiu do sistema!")
    st.stop()


# **üìå Criar menu lateral de navega√ß√£o**
aba = st.sidebar.radio("Navega√ß√£o", ["Cadastro", "Filtragem", "Categorias", "Relat√≥rios", "Clientes"])

if aba == "Cadastro":
    st.header("Cadastro de Produtos")
    nome_produto = st.text_input("Nome do Produto")
    categoria_produto = st.text_input("Categoria")
    preco_produto = st.number_input("Pre√ßo", min_value=0.01)
    quantidade_produto = st.number_input("Quantidade", min_value=1)

    if st.button("Cadastrar Produto"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO produtos (nome, categoria, preco, quantidade) VALUES (?, ?, ?, ?)",
                       (nome_produto, categoria_produto, preco_produto, quantidade_produto))
        conn.commit()
        conn.close()
        st.success("‚úÖ Produto cadastrado com sucesso!")
        
# **üìä Cadastro de Clientes**       
elif aba == "Clientes":
    st.header("Cadastro de Clientes")
    nome_cliente = st.text_input("Nome do Cliente")
    email_cliente = st.text_input("Email do Cliente")
    telefone_cliente = st.text_input("Telefone")
    
    if st.button("Cadastrar Cliente"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO clientes (nome, email, telefone) VALUES (?, ?, ?)", 
                       (nome_cliente, email_cliente, telefone_cliente))
        conn.commit()
        conn.close()
        st.success("‚úÖ Cliente cadastrado com sucesso!")


elif aba == "Filtragem":
    st.header("üìä Filtragem de dados")
    filtro_nome = st.text_input("Filtrar por Nome")
    filtro_data = st.date_input("Filtrar por Data")

    if st.button("Buscar"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM vendas WHERE data >= ?", (filtro_data,))
        resultado = cursor.fetchall()
        conn.close()
        st.write("Resultados encontrados:", resultado)

elif aba == "Categorias":
    st.header("üóÇÔ∏è Visualiza√ß√£o por Categorias")
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT categoria FROM produtos")
    categorias = cursor.fetchall()
    conn.close()

    for categoria in categorias:
        st.subheader(categoria[0])
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("SELECT nome, preco FROM produtos WHERE categoria = ?", (categoria[0],))
        produtos = cursor.fetchall()
        conn.close()
        st.write(produtos)

elif aba == "Relat√≥rios":
    st.header("üìë Relat√≥rios Financeiros")
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(id) FROM vendas")
    total_vendas = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(id) FROM clientes")
    total_clientes = cursor.fetchone()[0]
    conn.close()

    st.metric("üí∞ Total de Vendas", total_vendas)
    st.metric("üßë‚Äçüíº Total de Clientes", total_clientes)
